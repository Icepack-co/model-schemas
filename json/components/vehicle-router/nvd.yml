
NVD.Configuration:
  type: object
  required:
    - timeUnit
    - timeCoef
    - timeCostCoef
    - distanceUnit
    - distanceCostCoef
    - intraTerritoryBalance
    - interTerritoryBalance
    - weekLength
    - periodLength
  properties:
    timeUnit:
      type: string
      enum: ["SECONDS", "MINUTES", "HOURS", "DAYS"]
    timeCoef:
      type: number
      format: float
    timeCostCoef:
      type: number
      format: float
    distanceUnit:
      type: string
      enum: ["KILOMETRES", "MILES"]
    distanceCostCoef:
      type: number
      format: float
    intraTerritoryBalance:
      type: number
      format: float
    interTerritoryBalance:
      type: number
      format: float
    weekLength:
      type: integer
      format: int32
    periodLength:
      type: integer
      format: int32

NVD.Geocode:
  type: object
  required:
    - longitude
    - latitude
  properties:
    longitude:
      type: number
      format: float
    latitude:
      type: number
      format: float

NVD.Profile.CustomCycle:
  type: object
  properties:
    visitProfile:
      type: array
      items: 
        type: boolean

NVD.Profile:
  type: object
  required:
    - frequencyType
  properties:
    frequencyType:
      type: string
      enum: ["CUSTOM","SEVEN_TIMES_A_WEEK","SIX_TIMES_A_WEEK","FIVE_TIMES_A_WEEK","FOUR_TIMES_A_WEEK",
      "THREE_TIMES_A_WEEK","TWICE_A_WEEK","ONCE_A_WEEK","EVERY_SECOND_WEEK","ONCE_A_MONTH"]
    allowableCycles:
      type: array
      items:
        $ref: '#/NVD.Profile.CustomCycle'
    numVisits:
      type: integer
      format: int32

NVD.Visit.TerritoryRelation:
  type: object
  required:
    - type
  properties:
    type:
      type: string
      enum: ["INCLUSIVE","EXCLUSIVE"]
    territoryIds:
      type: array
      items:
        type: string

NVD.Visit:
  type: object
  required:
    - id
    - location
    - visitTime
    - profile
  properties:
    id:
      type: string
    location:
      $ref: '#/NVD.Geocode'
    visitTime:
      type: number
      format: float
    profile:
      $ref: '#/NVD.Profile'
    territoryRelations:
      $ref: '#/NVD.Visit.TerritoryRelation'


NVD.Territory:
  type: object
  required:
    - id
    - location
  properties:
    id:
      type: string
    dailyStartTime:
      type: array
      items:
        type: number
        format: float
    dailyEndTime:
      type: array
      items:
        type: number
        format: float
    location:
      $ref: '#/NVD.Geocode'

NVD.VisitSequence:
  type: object
  required:
    - territoryId
    - dayIndex
  properties:
    territoryId:
      type: string
    dayIndex:
      type: integer
      format: int32
    visitId:
      type: array
      items:
        type: string

NVD.Model:
  type: object
  required:
    - configuration
  properties:
    configuration: 
      $ref: '#/NVD.Configuration'
    visits:
      type: array
      items:
        $ref: '#/NVD.Visit'
    territories:
      type: array
      items:
        $ref: '#/NVD.Territory'
    visitSequence:
      type: array
      items:
        $ref: '#/NVD.VisitSequence'

NVD.CachedModel:
  type: object
  required:
    - model
  properties:
    model:
      $ref: '#/NVD.Model'

NVD.SolveRequest:
  type: object
  properties:
    model:
      $ref: '#/NVD.Model'
    modelID:
      type: string
    routes:
      type: array
      items:
        $ref: '#/NVD.VisitSequence'
    solveType:
      type: string
      enum: ["Optimise", "Evaluate", "ReOptimise"]
      default: "Optimise"

# OUPUT Objects

NVD.SolutionResponse.Infeasibility.Info:
  type: object
  required:
    - message
  properties:
    message:
      type: string
    dimId:
      type: string
    limit:
      type: number
      format: float
    value:
      type: number
      format: float
    count:
      type: integer
      format: int64
    constrainingTaskIds:
      type: array
      items:
        type: string

NVD.SolutionResponse.Infeasibility:
  type: object
  required:
    - taskId
  properties:
    taskId:
      type: string
    infeasibilityInfo:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.Infeasibility.Info'


NVD.SolutionResponse.Stop.Attribute:
  type: object
  required:
    - dimId
    - startValue
    - endValue
    - cost
    - slackValue
    - slackCost
    - tardyValue
    - tardyCost
  properties:
    dimId:
      type: string
    startValue:
      type: number
      format: float
    endValue:
      type: number
      format: float
    cost:
      type: number
      format: float
    slackValue:
      type: number
      format: float
    slackCost:
      type: number
      format: float
    tardyValue:
      type: number
      format: float
    tardyCost:
      type: number
      format: float

NVD.SolutionResponse.Stop:
  type: object
  required:
    - id
    - sequence
    - locationId
    - taskId
    - jobId
  properties:
    id:
      type: integer
      format: int32
    sequence:
      type: integer
      format: int32
    locationId:
      type: string
    visitId:
      type: string
    attributes:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.Stop.Attribute'

NVD.SolutionResponse.InterStop.Attribute:
  type: object
  required:
    - dimId
    - startValue
    - endValue
    - cost
  properties:
    dimId:
      type: string
    startValue:
      type: number
      format: float
    endValue:
      type: number
      format: float
    cost:
      type: number
      format: float

NVD.SolutionResponse.InterStop:
  type: object
  required:
    - fromStopId
    - toStopId
  properties:
    fromStopId:
      type: integer
      format: int32
    toStopId:
      type: integer
      format: int32
    attributes:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.InterStop.Attribute'
    routeSegments:
      type: array
      items:
        $ref: '#/NVD.Geocode'

NVD.SolutionResponse.TransitRuleAttribute:
  type: object
  required:
    - ruleId
    - dimId
    - fromStopId
    - toStopId
    - startValue
    - endValue
    - cost
  properties:
    ruleId:
      type: string
    dimId:
      type: string
    fromStopId:
      type: integer
      format: int32
    toStopId:
      type: integer
      format: int32
    startValue:
      type: number
      format: float
    endValue:
      type: number
      format: float
    cost:
      type: number
      format: float

NVD.SolutionResponse.Route:
  type: object
  required:
    - vehicleId
    - day
  properties:
    vehicleId:
      type: string
    stops:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.Stop'
    interStops:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.InterStop'
    fixedCost:
      type: array
      items:
        type: number
        format: float
    transitRuleAttributes:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.TransitRuleAttribute'
    day:
      type: integer
      format: int32

NVD.SolutionResponse.SolutionInstance:
  type: object
  required:
    - objective
  properties:
    routes:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.Route'
    infeasibilities:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.Infeasibility'

NVD.SolutionResponse.CompactSolution:
  type: object
  properties:
    visitSequence:
      type: array
      items:
        $ref: '#/NVD.VisitSequence'
    objectives:
      type: array
      items: 
        type: number
        format: float
    objectiveNames:
      type: array
      items:
        type: string

NVD.SolutionResponse:
  type: object
  properties:
    frontier:
      type: array
      items:
        $ref: '#/NVD.SolutionResponse.CompactSolution'
    instance:
      $ref: '#/NVD.SolutionResponse.SolutionInstance'


NVD.SolverResponse:
  type: object
  required:
    - state
  properties:
    logs:
      type: array
      items:
        $ref: '../common.yml#/SolverInfo'
    state:
      type: string
      enum: ["INFO", "COMPLETED", "FAILED"]
    solution:
      $ref: '#/NVD.SolutionResponse'